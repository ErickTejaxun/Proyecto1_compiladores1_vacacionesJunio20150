package olc1_proyecto1;

/* The following code was generated by JFlex 1.6.0 */


import java_cup.runtime.Symbol;
import java.util.ArrayList;
/*
Directivas:
public: clase publica
cup: compatibilidad con cup
full: extender el alfabeto con todos los valores de 8 bits
line: agrega la variable int yyline, para indicar la fila del lexema
char: agrega la variable int yychar, indica el indice del primer caracter del lexema
ignorecase: validar, indistitntamente si la letra es mayuscula o minuscula
eofval: especifica un valor de retorno al final del archivo
*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>Scanner.jflex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMENTARIO = 2;
  public static final int PHP = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  3, 46,  1,  2,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1, 30,  6,  0, 32,  0, 44, 38, 33, 34, 39, 41,  0, 40, 36, 10, 
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  8, 37, 11, 35, 18, 31, 
     0, 26, 28, 12,  5, 22, 29,  5, 19, 17,  5,  5, 27, 14,  5, 13, 
    15,  5, 23, 25, 20, 21,  5,  5,  5,  5,  5,  0,  9,  0,  0,  7, 
     0, 26, 28, 12,  5, 22, 29,  5, 19, 17,  5,  5, 27, 14,  5, 13, 
    15,  5, 23, 25, 20, 21,  5,  5,  5,  5,  5, 42, 45, 43,  0,  0, 
     0,  0,  0,  0,  0, 46,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\2\1\1\6"+
    "\1\7\1\6\1\10\1\11\1\12\1\13\1\1\1\11"+
    "\1\14\3\11\2\1\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\2\1"+
    "\1\5\1\0\1\31\10\0\1\32\1\0\1\33\1\34"+
    "\2\35\1\36\4\11\1\37\1\40\1\41\1\42\12\0"+
    "\1\43\1\44\1\45\6\0\2\11\1\0\2\11\1\46"+
    "\3\0\1\47\1\50\1\51\5\0\1\52\1\0\1\53"+
    "\3\0\1\54\1\0\1\55\1\56\2\57\1\0\1\11"+
    "\1\0\1\60\1\0\1\61\2\0\1\62\3\0\1\63"+
    "\1\0\1\64\2\65\3\0\1\66\7\0\1\67\1\0"+
    "\1\70\1\0\1\71\1\0\1\72\1\73\1\74\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\215\0\215\0\274\0\353"+
    "\0\u011a\0\u0149\0\215\0\215\0\u0178\0\215\0\u01a7\0\215"+
    "\0\u01d6\0\u0205\0\u0234\0\u0263\0\u0292\0\u02c1\0\u02f0\0\u031f"+
    "\0\u034e\0\215\0\215\0\215\0\215\0\215\0\215\0\215"+
    "\0\215\0\215\0\215\0\215\0\215\0\u037d\0\u03ac\0\u03db"+
    "\0\u040a\0\u011a\0\u0439\0\u0468\0\u0497\0\u04c6\0\u04f5\0\u0524"+
    "\0\u0553\0\u0582\0\215\0\u05b1\0\215\0\215\0\215\0\u01a7"+
    "\0\215\0\u05e0\0\u060f\0\u063e\0\u066d\0\215\0\215\0\215"+
    "\0\215\0\u069c\0\u06cb\0\u06fa\0\u0729\0\u0758\0\u0787\0\u07b6"+
    "\0\u07e5\0\u0814\0\u0843\0\215\0\215\0\215\0\u0872\0\u08a1"+
    "\0\u08d0\0\u08ff\0\u092e\0\u095d\0\u098c\0\u09bb\0\u09ea\0\u0a19"+
    "\0\u0a48\0\u0a77\0\u0aa6\0\u0ad5\0\u0b04\0\215\0\215\0\215"+
    "\0\u0b33\0\u0b62\0\u0b91\0\u0bc0\0\u0bef\0\215\0\u0c1e\0\215"+
    "\0\u0c4d\0\u0c7c\0\u0cab\0\215\0\u0cda\0\u01a7\0\u01a7\0\215"+
    "\0\u01a7\0\u0d09\0\u0d38\0\u0d67\0\215\0\u0d96\0\215\0\u0dc5"+
    "\0\u0df4\0\215\0\u0e23\0\u0e52\0\u0e81\0\215\0\u0eb0\0\215"+
    "\0\215\0\u01a7\0\u0edf\0\u0f0e\0\u0f3d\0\215\0\u0f6c\0\u0f9b"+
    "\0\u0fca\0\u0ff9\0\u1028\0\u1057\0\u1086\0\215\0\u10b5\0\215"+
    "\0\u10e4\0\215\0\u1113\0\215\0\215\0\215\0\215";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\10\4\4\1\11\1\12"+
    "\4\10\1\4\1\10\1\4\5\10\1\4\5\10\20\4"+
    "\1\0\1\13\2\14\1\6\6\13\1\4\23\13\1\15"+
    "\10\13\1\4\7\13\1\4\2\16\1\6\1\7\1\17"+
    "\4\4\1\20\1\21\4\17\1\22\1\23\1\24\1\17"+
    "\1\25\1\17\1\26\1\17\1\4\4\17\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\64\0"+
    "\1\7\56\0\2\50\1\0\1\50\1\51\3\0\4\50"+
    "\1\0\1\50\1\0\5\50\1\0\5\50\21\0\2\52"+
    "\2\0\2\52\1\0\2\52\1\0\45\52\12\0\1\53"+
    "\1\0\1\54\2\0\1\55\3\0\1\56\1\57\1\0"+
    "\1\60\1\0\2\61\3\0\1\62\1\63\1\64\41\0"+
    "\1\65\40\0\2\17\1\0\1\17\4\0\4\17\1\0"+
    "\1\17\1\0\5\17\1\0\5\17\64\0\1\66\50\0"+
    "\1\67\25\0\2\17\1\0\1\17\4\0\4\17\1\0"+
    "\1\17\1\0\5\17\1\0\4\17\1\70\64\0\1\71"+
    "\17\0\2\17\1\0\1\17\4\0\4\17\1\0\1\17"+
    "\1\0\4\17\1\72\1\0\5\17\25\0\2\17\1\0"+
    "\1\17\4\0\1\73\3\17\1\0\1\17\1\0\5\17"+
    "\1\0\2\17\1\74\2\17\25\0\2\17\1\0\1\17"+
    "\4\0\4\17\1\0\1\17\1\0\5\17\1\0\1\17"+
    "\1\75\3\17\64\0\1\76\35\0\1\77\110\0\1\100"+
    "\57\0\1\101\5\0\2\50\1\0\1\50\4\0\4\50"+
    "\1\0\1\50\1\0\5\50\1\0\5\50\32\0\1\102"+
    "\61\0\1\103\2\0\1\104\3\0\1\105\1\106\1\0"+
    "\1\107\6\0\1\110\36\0\1\111\6\0\1\112\1\113"+
    "\53\0\1\114\56\0\1\115\56\0\1\116\1\0\1\117"+
    "\5\0\1\120\54\0\2\121\57\0\1\122\50\0\1\123"+
    "\51\0\1\124\43\0\2\17\1\0\1\17\4\0\4\17"+
    "\1\0\1\17\1\0\2\17\1\125\2\17\1\0\5\17"+
    "\25\0\2\17\1\0\1\17\4\0\4\17\1\0\1\17"+
    "\1\0\1\126\4\17\1\0\5\17\25\0\2\17\1\0"+
    "\1\17\4\0\4\17\1\0\1\17\1\0\5\17\1\127"+
    "\1\130\4\17\25\0\2\17\1\0\1\17\4\0\4\17"+
    "\1\0\1\17\1\0\5\17\1\0\2\17\1\131\2\17"+
    "\21\0\2\132\2\0\2\132\1\0\2\132\1\0\45\132"+
    "\15\0\1\133\6\0\1\134\1\135\53\0\1\136\56\0"+
    "\1\137\56\0\1\140\1\0\1\141\5\0\1\142\54\0"+
    "\2\143\51\0\1\144\50\0\1\145\62\0\1\146\62\0"+
    "\1\147\52\0\1\150\70\0\1\151\41\0\1\152\72\0"+
    "\1\153\45\0\1\154\57\0\1\155\37\0\2\17\1\0"+
    "\1\17\4\0\4\17\1\0\1\17\1\0\3\17\1\156"+
    "\1\17\1\0\5\17\25\0\2\17\1\0\1\17\4\0"+
    "\1\17\1\157\2\17\1\0\1\17\1\0\5\17\1\0"+
    "\5\17\47\0\1\160\34\0\2\17\1\0\1\17\4\0"+
    "\4\17\1\0\1\17\1\0\3\17\1\161\1\17\1\0"+
    "\5\17\25\0\2\17\1\0\1\17\4\0\4\17\1\0"+
    "\1\17\1\0\5\17\1\162\1\163\4\17\21\0\2\132"+
    "\2\0\2\132\1\0\2\132\1\102\45\132\16\0\1\164"+
    "\62\0\1\165\62\0\1\166\52\0\1\167\70\0\1\170"+
    "\41\0\1\171\61\0\1\172\53\0\1\173\66\0\1\174"+
    "\62\0\1\175\45\0\1\176\60\0\1\177\51\0\1\200"+
    "\65\0\1\201\34\0\2\17\1\0\1\17\4\0\4\17"+
    "\1\0\1\17\1\0\3\17\1\202\1\17\1\0\5\17"+
    "\40\0\1\203\66\0\1\204\62\0\1\205\45\0\1\206"+
    "\54\0\2\207\54\0\1\210\71\0\1\211\41\0\1\212"+
    "\61\0\2\213\54\0\1\214\71\0\1\215\46\0\1\216"+
    "\51\0\1\217\63\0\1\220\46\0\1\221\66\0\1\222"+
    "\51\0\1\223\63\0\1\224\56\0\1\225\56\0\1\226"+
    "\56\0\1\227\34\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4418];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\3\11\4\1\2\11\1\1\1\11\1\1\1\11"+
    "\11\1\14\11\3\1\1\0\1\1\10\0\1\11\1\0"+
    "\3\11\1\1\1\11\4\1\4\11\12\0\3\11\6\0"+
    "\2\1\1\0\3\1\3\0\3\11\5\0\1\11\1\0"+
    "\1\11\3\0\1\11\1\0\2\1\1\11\1\1\1\0"+
    "\1\1\1\0\1\11\1\0\1\11\2\0\1\11\3\0"+
    "\1\11\1\0\2\11\1\1\3\0\1\11\7\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\4\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	public static String urlAuxliar="";
	public static Boolean fin=false;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { System.out.println("Caracter ilegal: " + yytext()+" Linea : "+yyline +" Columna: "+yychar); 
			Errores errorLexico=new Errores();
			errorLexico.setTipo("Lexico");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion("Caracter Ilegal: "+yytext());
			Menu.errores_lexicos.add(errorLexico);
			//Proyecto1_Compiladores.listaLexico.add(errorLexico);
			//Menu.listaLexico=Proyecto1_Compiladores.listaLexico;
          }
        case 62: break;
        case 2: 
          { System.out.println("Salto de linea");
          }
        case 63: break;
        case 3: 
          { yychar=0;
          }
        case 64: break;
        case 4: 
          { tablaSimbolos simbolo=new tablaSimbolos();
			simbolo.setTipo("Numero");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion(yytext());
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.numero, yychar, yyline, new Integer(yytext()).doubleValue());
          }
        case 65: break;
        case 5: 
          { tablaSimbolos simbolo=new tablaSimbolos();
			simbolo.setTipo("ID");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion(yytext());
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.id, yychar, yyline, yytext());
          }
        case 66: break;
        case 6: 
          { System.out.println(yytext());
          }
        case 67: break;
        case 7: 
          { 
          }
        case 68: break;
        case 8: 
          { System.out.println("Espacio,salto de linea etc.");
          }
        case 69: break;
        case 9: 
          { tablaSimbolos simbolo=new tablaSimbolos();
			simbolo.setTipo("ID");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion(yytext());
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.idVariable, yychar, yyline, yytext());
          }
        case 70: break;
        case 10: 
          { tablaSimbolos simbolo = new tablaSimbolos();
			simbolo.setTipo("Simbolo Aritmetico");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion("/");
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.division,yychar,yyline,yytext());
          }
        case 71: break;
        case 11: 
          { tablaSimbolos simbolo = new tablaSimbolos();
			simbolo.setTipo("Operador booleano");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion("< : menor que");
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.menorque,yychar,yyline,yytext());
          }
        case 72: break;
        case 12: 
          { tablaSimbolos simbolo = new tablaSimbolos();
			simbolo.setTipo("Operador booleano");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion("> : mayor que");
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.mayorque,yychar,yyline,yytext());
          }
        case 73: break;
        case 13: 
          { tablaSimbolos simbolo = new tablaSimbolos();
			simbolo.setTipo("Simbolo PHP");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion("'$' : Definicion de Variable");
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.definicionvariable,yychar,yyline,yytext());
          }
        case 74: break;
        case 14: 
          { tablaSimbolos simbolo = new tablaSimbolos();
			simbolo.setTipo("Simbolo PHP");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion("'(' : abrir parentesis");
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.abrirparentesis,yychar,yyline,yytext());
          }
        case 75: break;
        case 15: 
          { tablaSimbolos simbolo = new tablaSimbolos();
			simbolo.setTipo("Simbolo PHP");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion("')' : cerrar parentesis");
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.cerrarparentesis,yychar,yyline,yytext());
          }
        case 76: break;
        case 16: 
          { tablaSimbolos simbolo = new tablaSimbolos();
			simbolo.setTipo("Simbolo PHP");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion("'=' : Asignacion");
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.asignacion,yychar,yyline,yytext());
          }
        case 77: break;
        case 17: 
          { tablaSimbolos simbolo = new tablaSimbolos();
			simbolo.setTipo("Simbolo PHP");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion("'.' : punto/concatenacion");
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.punto,yychar,yyline,yytext());
          }
        case 78: break;
        case 18: 
          { tablaSimbolos simbolo = new tablaSimbolos();
			simbolo.setTipo("Simbolo PHP");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion("';' : Punto y coma");
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.puntocoma,yychar,yyline,yytext());
          }
        case 79: break;
        case 19: 
          { tablaSimbolos simbolo = new tablaSimbolos();
			simbolo.setTipo("Simbolo PHP");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion("' : Comilla");
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.comilla,yychar,yyline,yytext());
          }
        case 80: break;
        case 20: 
          { tablaSimbolos simbolo = new tablaSimbolos();
			simbolo.setTipo("Simbolo Aritmetico");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion("*");
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.multiplicacion,yychar,yyline,yytext());
          }
        case 81: break;
        case 21: 
          { tablaSimbolos simbolo = new tablaSimbolos();
			simbolo.setTipo("Simbolo Aritmetico");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion("-");
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.resta,yychar,yyline,yytext());
          }
        case 82: break;
        case 22: 
          { tablaSimbolos simbolo = new tablaSimbolos();
			simbolo.setTipo("Simbolo Aritmetico");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion("+");
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.suma,yychar,yyline,yytext());
          }
        case 83: break;
        case 23: 
          { tablaSimbolos simbolo = new tablaSimbolos();
			simbolo.setTipo("Simbolo");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion("{");
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.abrircorchetes,yychar,yyline,yytext());
          }
        case 84: break;
        case 24: 
          { tablaSimbolos simbolo = new tablaSimbolos();
			simbolo.setTipo("Simbolo");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion("}");
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.cerrarcorchetes,yychar,yyline,yytext());
          }
        case 85: break;
        case 25: 
          { tablaSimbolos simbolo=new tablaSimbolos();
			simbolo.setTipo("Path linux");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion(yytext());
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.urll, yychar, yyline, yytext());
          }
        case 86: break;
        case 26: 
          { yybegin(COMENTARIO);
					System.out.println("Inicio Comentario");
          }
        case 87: break;
        case 27: 
          { yybegin(YYINITIAL);
          }
        case 88: break;
        case 28: 
          { tablaSimbolos simbolo = new tablaSimbolos();
			simbolo.setTipo("Operador booleano");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion(">= : menor o igual que");
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.menorigual,yychar,yyline,yytext());
          }
        case 89: break;
        case 29: 
          { tablaSimbolos simbolo = new tablaSimbolos();
			simbolo.setTipo("Palabra Reservada");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion(" 'if' : Operador booleano");
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.si,yychar,yyline,yytext());
          }
        case 90: break;
        case 30: 
          { tablaSimbolos simbolo = new tablaSimbolos();
			simbolo.setTipo("Operador booleano");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion(">= : mayor o igual que");
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.mayorigual,yychar,yyline,yytext());
          }
        case 91: break;
        case 31: 
          { tablaSimbolos simbolo = new tablaSimbolos();
			simbolo.setTipo("Operador booleano");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion("!= : distinto que");
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.distinto,yychar,yyline,yytext());
          }
        case 92: break;
        case 32: 
          { yybegin(YYINITIAL);
			System.out.println("Termina lenguaje php");
			tablaSimbolos simbolo=new tablaSimbolos();
			simbolo.setTipo("Palabra Reservada");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion(yytext());
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.finphp, yychar, yyline, yytext());
          }
        case 93: break;
        case 33: 
          { tablaSimbolos simbolo = new tablaSimbolos();
			simbolo.setTipo("Operador Logico");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion(" '&&' : 'y'");
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.y,yychar,yyline,yytext());
          }
        case 94: break;
        case 34: 
          { tablaSimbolos simbolo = new tablaSimbolos();
			simbolo.setTipo("Operador Logico");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion(" '||' : 'o'");
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.o,yychar,yyline,yytext());
          }
        case 95: break;
        case 35: 
          { tablaSimbolos simbolo = new tablaSimbolos();
			simbolo.setTipo("Palabra Reservada HTML");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion("<p> : Inicio parrafo");
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.abrirparrafo,yychar,yyline,yytext());
          }
        case 96: break;
        case 36: 
          { tablaSimbolos simbolo=new tablaSimbolos();
			simbolo.setTipo("Palabra Reservada HTML");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion("<h> : Inicio Cabecera");
			Menu.tabla_simbolos.add(simbolo);	
			return new Symbol(simbolos.abrircabecera, yychar, yyline, yytext());
          }
        case 97: break;
        case 37: 
          { tablaSimbolos simbolo=new tablaSimbolos();
			simbolo.setTipo("Palabra Reservada HTML");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion("<t> : Inicio Titulo de la pagina");
			Menu.tabla_simbolos.add(simbolo);	
			return new Symbol(simbolos.abrirtitulo, yychar, yyline, yytext());
          }
        case 98: break;
        case 38: 
          { tablaSimbolos simbolo=new tablaSimbolos();
			simbolo.setTipo("Path windos");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion(yytext());
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.urlw, yychar, yyline, yytext());
          }
        case 99: break;
        case 39: 
          { tablaSimbolos simbolo = new tablaSimbolos();
			simbolo.setTipo("Palabra Reservada HTML");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion("</p> : Fin parrafo");
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.cerrarparrafo,yychar,yyline,yytext());
          }
        case 100: break;
        case 40: 
          { tablaSimbolos simbolo=new tablaSimbolos();
			simbolo.setTipo("Palabra Reservada HTML");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion("</h> : Fin Cabecera");
			Menu.tabla_simbolos.add(simbolo);	
			return new Symbol(simbolos.cerrarcabecera, yychar, yyline, yytext());
          }
        case 101: break;
        case 41: 
          { tablaSimbolos simbolo=new tablaSimbolos();
			simbolo.setTipo("Palabra Reservada HTML");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion("</t> : Fin Titulo de la pagina");
			Menu.tabla_simbolos.add(simbolo);	
			return new Symbol(simbolos.cerrartitulo, yychar, yyline, yytext());
          }
        case 102: break;
        case 42: 
          { tablaSimbolos simbolo = new tablaSimbolos();
			simbolo.setTipo("Palabra Reservada HTML");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion("<ct> : Inicio Columna Cabecera");
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.abrircolumnacabecera,yychar,yyline,yytext());
          }
        case 103: break;
        case 43: 
          { tablaSimbolos simbolo = new tablaSimbolos();
			simbolo.setTipo("Palabra Reservada HTML");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion("<tt> : Inicio Columna");
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.abrircolumna,yychar,yyline,yytext());
          }
        case 104: break;
        case 44: 
          { tablaSimbolos simbolo = new tablaSimbolos();
			simbolo.setTipo("Palabra Reservada HTML");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion("<ft> : Inicio Fila");
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.abrirfila,yychar,yyline,yytext());
          }
        case 105: break;
        case 45: 
          { tablaSimbolos simbolo = new tablaSimbolos();
			simbolo.setTipo("Palabra Reservada PHP");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion("true : Factor Booleano");
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.verdadero,yychar,yyline,yytext());
          }
        case 106: break;
        case 46: 
          { tablaSimbolos simbolo = new tablaSimbolos();
			simbolo.setTipo("Palabra Reservada");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion("'echo' funcion Imprimir");
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.echo,yychar,yyline,yytext());
          }
        case 107: break;
        case 47: 
          { tablaSimbolos simbolo = new tablaSimbolos();
			simbolo.setTipo("Palabra Reservada");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion(" 'else' : Operador booleano");
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.sino,yychar,yyline,yytext());
          }
        case 108: break;
        case 48: 
          { tablaSimbolos simbolo = new tablaSimbolos();
			simbolo.setTipo("Palabra Reservada HTML");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion("</ct> : Fin Columna Cabecera");
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.cerrarcolumnacabecera,yychar,yyline,yytext());
          }
        case 109: break;
        case 49: 
          { tablaSimbolos simbolo = new tablaSimbolos();
			simbolo.setTipo("Palabra Reservada HTML");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion("</tt> : Fin Columna");
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.cerrarcolumna,yychar,yyline,yytext());
          }
        case 110: break;
        case 50: 
          { tablaSimbolos simbolo = new tablaSimbolos();
			simbolo.setTipo("Palabra Reservada HTML");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion("</ft> : Fin Fila");
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.cerrarfila,yychar,yyline,yytext());
          }
        case 111: break;
        case 51: 
          { tablaSimbolos simbolo = new tablaSimbolos();
			simbolo.setTipo("Palabra Reservada HTML");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion("<esp> : inicio espacio dentro de pagina");
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.abrirespacio,yychar,yyline,yytext());
          }
        case 112: break;
        case 52: 
          { yybegin(PHP);
					System.out.println("Comienza lenguaje php");
					tablaSimbolos simbolo=new tablaSimbolos();
					simbolo.setTipo("Palabra Reservada");
					simbolo.setLinea(yyline);
					simbolo.setColumna(yychar);
					simbolo.setDescripcion(yytext());
					Menu.tabla_simbolos.add(simbolo);
					return new Symbol(simbolos.iniciophp, yychar, yyline, yytext());
          }
        case 113: break;
        case 53: 
          { tablaSimbolos simbolo = new tablaSimbolos();
			simbolo.setTipo("Palabra Reservada PHP");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion("false : Factor Booleano");
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.falso,yychar,yyline,yytext());
          }
        case 114: break;
        case 54: 
          { tablaSimbolos simbolo = new tablaSimbolos();
			simbolo.setTipo("Palabra Reservada HTML");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion("</esp> : Fin espacio dentro de pagina");
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.cerrarespacio,yychar,yyline,yytext());
          }
        case 115: break;
        case 55: 
          { tablaSimbolos simbolo=new tablaSimbolos();
			simbolo.setTipo("Palabra Reservada HTML");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion("<compi> : Inicio Documento  ");
			Menu.tabla_simbolos.add(simbolo);	
			return new Symbol(simbolos.inicio, yychar, yyline, yytext());
          }
        case 116: break;
        case 56: 
          { tablaSimbolos simbolo = new tablaSimbolos();
			simbolo.setTipo("Palabra Reservada HTML");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion("<tabla> : Incio Tabla");
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.abrirtabla,yychar,yyline,yytext());
          }
        case 117: break;
        case 57: 
          { tablaSimbolos simbolo=new tablaSimbolos();
			simbolo.setTipo("Palabra Reservada HTML");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion("</compi> : Fin Documento");
			Menu.tabla_simbolos.add(simbolo);	
			return new Symbol(simbolos.fin, yychar, yyline, yytext());
          }
        case 118: break;
        case 58: 
          { tablaSimbolos simbolo = new tablaSimbolos();
			simbolo.setTipo("Palabra Reservada HTML");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion("</tabla> : Fin Tabla");
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.cerrartabla,yychar,yyline,yytext());
          }
        case 119: break;
        case 59: 
          { tablaSimbolos simbolo=new tablaSimbolos();
			simbolo.setTipo("Palabra Reservada HTML");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion("<cuerpo> : Inicio Cuerpo pagina");
			Menu.tabla_simbolos.add(simbolo);	
			return new Symbol(simbolos.abrircuerpo, yychar, yyline, yytext());
          }
        case 120: break;
        case 60: 
          { tablaSimbolos simbolo = new tablaSimbolos();
			simbolo.setTipo("Palabra Reservada HTML");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion("<salto/> : Salto de linea");
			Menu.tabla_simbolos.add(simbolo);
			return new Symbol(simbolos.saltolinea,yychar,yyline,yytext());
          }
        case 121: break;
        case 61: 
          { tablaSimbolos simbolo=new tablaSimbolos();
			simbolo.setTipo("Palabra Reservada HTML");
			simbolo.setLinea(yyline);
			simbolo.setColumna(yychar);
			simbolo.setDescripcion("</t> : Fin Cuerpo pagina");
			Menu.tabla_simbolos.add(simbolo);	
			return new Symbol(simbolos.cerrarcuerpo, yychar, yyline, yytext());
          }
        case 122: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	return new Symbol(simbolos.EOF,new String("Fin del archivo"));
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
